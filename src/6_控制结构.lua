---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by luowei.
--- DateTime: 2019/8/12 6:51
--- 控制结构
---

print("if then else 控制结构")
------------------------------------ if then else ----------------------------------
-- if then else 的完整语法如下所示，条件表达式中，所有不是false和nil的值视为真：
--[[
if condition1
    <执行体>
elseif condition2
    <执行体>
else
    <执行体>
end
--]]
function arith(a, b, op)
    if op == '+' then
        return a + b;
    elseif op == '-' then
        return a - b;
    elseif op == '*' then
        return a * b;
    else
        return a / b;
    end
end

re = arith(2, 3, "*")
print("", "arith(2, 3, '*') = ", re)


print("while 控制结构")
------------------------------------ while ----------------------------------
-- while控制结构如下所示：
--[[
while condition do
    <执行体>
end
--]]
local i = 1;    local a = {"one", "two", "three"};      local join
while a[i] do
    if join then
        join = join .. "-" .. a[i]
    else
        join = a[i]
    end
    i = i + 1
end
print("", "join = " .. join)


print("repeat 控制结构")
------------------------------------ repeat ----------------------------------
-- repeat-util语句重复执行气循环体直至条件为真时才结束，其结构如下所示：
--[[
repeat
    <执行体>
until condition
--]]
local top = 100; loopTimes = 0;
repeat
    top = top / 3
    loopTimes = loopTimes + 1
until top <= 1
print("", "finally top = " .. top .. ", loop times = " .. loopTimes)


print("数字型 for")
------------------------------------ 数字型 for ----------------------------------
-- 数字型 for 的语法如下所示，变量var从start变化到end，每次变化都以step作为步长递增var，并执行一次执行体。步长step是可选的，默认为1。
-- 其中，var变量为局部变量，仅在循环体内可见。三个表达式 start、end、step 是在循环开始前一次性求值的，并且在循环过程中始终保持不变，在循环过程中如果修改他们的值，可能导致不可预知的结果。
--[[
for var = start, end, step do
    <执行体>
end
--]]
sum = 0
for i = 1, 10 do                -- 如果将 10 改为 i + 10，结果将变为 105
    sum = sum + i
end
print("", "1 ~ 10 的和 = " .. sum)


print("泛型 for")
------------------------------------ 泛型 for ----------------------------------
-- 泛型for通过一个迭代器函数来遍历所有的值，Lua基础库提供了很多迭代器，用于各种场景的遍历。
-- 1、ipairs迭代器函数，用于迭代数组。下面的示例中，i会被赋予一个索引值，同时v被赋予一个对应于该索引的数组元素值（参考 4_赋值.lua 中的多重赋值）
arr = {"one", "two", "three", [4] = "four"}
for i, v in ipairs(arr) do
    if joinedArr == nil then
        joinedArr = v
    else
        joinedArr = joinedArr .. "-" .. v
    end
end
print("", "joined arr = " .. joinedArr)

-- 2、io.lines迭代器，用于迭代文件中的每一行
print("", "io.lines('Hello.lua'):")
for line in io.lines("Hello.lua") do
    print("", "", line)
end

-- 3、pairs迭代器，用于迭代table中的元素
languages = {java = "The Java Language", lua = "The Lua Language"}
print("", "pairs('language'):")
for k, v in pairs(languages) do
    print("", "", k .. " = " .. v)
end

-- 4、string.gmatch迭代器，用于迭代字符串中所有匹配的子串
str = "hello, world!";
print("", "string.gmatch:")
for c in string.gmatch(str, 'l') do
    print("", "", c);
end


------------------------------------ break return ----------------------------------
-- break 用于跳出当前的循环，和Java中的break意义相同
-- return 用于从一个函数返回结果或者结束一个函数的执行
-- break 和 return必须是一个块的最后一条语句，或者是end、else或until前的一条语句
print("break return")
languages = {java = "The Java Language", lua = "The Lua Language"}
for k, v in pairs(languages) do
    if k == 'lua' then
        print("", "it's Lua")
        break
    end
    print("", k .. " = " .. v)
end

