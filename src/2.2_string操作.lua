---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by luowei.
--- DateTime: 2019/8/18 7:21
--- 字符串操作
---

------------------------------------ string.find ----------------------------------
-- string.find(s, pattern[, init[, plain])
--      该函数用于在字符串s中搜索与模式pattern匹配的第一个子串。如果找到了，将返回匹配子串的起始位置和截止位置，否则，将返回nil
--      参数init指定搜索的开始位置，默认值为1。如果指定为负数，表示从
--      参数plain用于指定模式匹配还是纯字符串匹配。如果为true，表示字符串匹配。默认值为false
--      如果模式pattern中有捕获组（即成对的圆括号），匹配的捕获组也将在起始位置和截止位置之后返回
print("string.find")
str = "abcdefg,abcdefg"
si, ei = string.find(str, "(%w+),", 1)
print("", "si = " .. tostring(si) .. ", ei = " .. tostring(ei))


------------------------------------ string.match ----------------------------------
-- string.match(s, pattern)
--      该函数用于返回第一个和模式pattern匹配的所有捕获组。如果模式pattern中未指定子模式，将返回整个匹配的子串
print("string.match")
x = string.match("hello world from Lua", "(%w+)%s*")
print("", x)
x = string.match("hello world from Lua", "((%w+)%s)+")
print("", "x2 = " .. tostring(x))

------------------------------------ string.gmatch ----------------------------------
-- string.gmatch (s, pattern)
--      该函数将返回一个迭代器，用于迭代下一个匹配的所有捕获组，如果pattern中未指定子模式，将返回整个匹配的子串。
--      如果模式中包含多个子模式，每一次迭代都将返回所有子模式匹配的子串（即捕获组），所以，可以在迭代中使用多返回值接收。
print("string.gmatch")
str = "hello world from Lua"
print("", "patter包含捕获组")
for w, v in string.gmatch(str, "%a+(l)(o)") do        -- "%a+(l)(o)"应该可以匹配到"hello"，但是gmatch只会包含捕获组（即和子模式"l"和"o"匹配的子串）的内容
    print("", "", tostring(w), tostring(v))                     -- 返回了两个捕获组匹配的内容
end
print("", "patter未包含捕获组")
for w, v in string.gmatch(str, "%a+") do           -- "%a+"没有包含捕获组，所以每次返回了整个匹配的子串
    print("", "", tostring(w), tostring(v))
end

------------------------------------ string.gsub ----------------------------------
-- string.gsub(s, pattern, repl[, n])
--      该函数用于在字符串s中搜索与模式pattern匹配的子串，并将所有匹配的子串替换为repl的值后返回（如果指定了参数n，将只替换n指定个数的子串）。
--      repl可以是一个字符串、表格(table)、函数。
--          当repl为一个字符串时，该字符串将直接替换匹配的子串；repl中的"%"字符用于转义字符，"%n"(n为0-9之间的数)表示与第n个捕获组匹配的子串。"%0"表示整个匹配的子串。"%%"用于表示"%"自身。
--          当repl为一个table时，每次匹配子串后，都将以匹配的第一个捕获组为key返回table中该key对应的值，替换到匹配的子串。如果pattern中未指定子模式，key为匹配的整个子串
--          当repl为一个函数时，每次匹配子串后，将所有匹配的捕获组作为参数传入函数，并使用函数的返回值替换匹配的子串。如果pattern中未指定子模式，函数的入参为匹配的整个子串
print("string.gsub")
-- 示例：下面将字符串中的每个单词重复一次
x1 = string.gsub("hello world", "(%w+)", "%1 %1")        -- 等价与 string.gsub("hello world", "%w+", "%0 %0")
print("", "1: ", "x1 = " .. x1)

x2 = string.gsub("hello world", "%w+", "%0 %0", 1)
print("", "2: ", "x2 = " .. x2)

x3 = string.gsub("hello world from Lua", "(%w+)%s(%w+)", "%2 %1")
print("", "3: ", "x3 = " .. x3)

-- 定义一个reverse字符串参数的函数
function reverse(str)
    return string.reverse(str) .. ' '
end
x4 = string.gsub("hello world from Lua", "(%w+)%s*", reverse)
print("", "4: ", "x4 = " .. x4)

-- 定义一个table，保存所有需要替换的子串映射
local t = {papa="will", mama="susie"}
x5 = string.gsub("I love $papa and $mama", "%$(%w+)", t)
print("", "5: ", "x5 = " .. x5)

------------------------------------ string.rep ----------------------------------
-- string.rep (s, n [, sep])
--      该函数返回n个字符串s通过分隔符sep拼接的结果。sep默认为空字符串，即没有分隔符（经过测试，好像sep参数设置不会起作用）
print("string.rep")
x = string.rep("s", 2, ": ")
print("", x)

------------------------------------ string.len ----------------------------------
-- string.len(s) 返回字符串的长多

------------------------------------ string.sub ----------------------------------
-- string.sub(s, i[, j]) 返回字符串中从i到j的子串。如果未指定参数j，表示从i到字符串末尾的子串。j可以为负数，-1表示字符串末尾；-2表示倒数第2个字符。i从1开始
print("string.sub")
str = "abcdef"
print("", string.sub(str, 1, 2))
print("", string.sub(str, 2, -1))
print("", string.sub(str, 2, -2))

------------------------------------ string.lower ----------------------------------
-- string.lower(s) 用于返回字符串的小写形式



------------------------------------ string.byte ----------------------------------
-- string.byte(s[, i[, j]])
--      用于返回s[i], s[i+1], ..., s[j]之间字符映射到ASCII码表中的数字值，i从1开始。i默认为1，j默认为i。即：string.byte(s) 等价于 string.byte(s, 1, 1)
print("string.byte()")
print("", string.byte("abcdefg", 1, 2))

------------------------------------ string.char ----------------------------------
-- string.char(...)
--      返回参数中指定整数对应ASCII码表的字符构成的字符串。参数中只能指定整数值
print("string.char()")
print("", string.char(97, 98))

------------------------------------ string.dump ----------------------------------
-- string.dump(function[, strip])
--      Returns a string containing a binary representation (a binary chunk) of the given function,
--      so that a later load（使用loadstring函数） on this string returns a copy of the function (but with new upvalues).
--      If strip is a true value, the binary representation may not include all debug information about the function, to save space.
--      Functions with upvalues have only their number of upvalues saved. When (re)loaded, those upvalues receive fresh instances containing nil. (You can use the debug library to serialize and reload the upvalues of a function in a way adequate to your needs.)
--      例如：下面定义一个加法函数，并使用dump转换为一个字符串，后续再使用loadstring加载该函数。
print("string.dump()")
function add(a, b)
    return a + b;
end
codedFunc = string.dump(add, false)
print("", "codedFunc = " .. tostring(codedFunc))
f = loadstring(codedFunc)
print("", "f(1, 2) = " .. f(1, 2))

