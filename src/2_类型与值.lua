---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by luowei.
--- DateTime: 2019/8/10 22:38
--- 演示Lua的类型与值
---
------------------------------------ 概述 ----------------------------------
-- Lua是一种动态语言，对于变量来说，是没有类型的概念的，但是每个值都有类型。一个变量可以包含任何类型的值。
-- Lua共有8种基础类型：nil boolean string userdata(自定义类型) function thread(线程) table(表)。 可使用函数type(var)返回值的类型
print("Lua值的类型:")
print("", type(1), type("string"), type(print), type(true), type(nil));


------------------------------------ nil 类型 ----------------------------------
-- nil 类型只有一个值“nil”，主要用于区别其他任何值，表示变量没有任何有效的值

------------------------------------ boolean 类型 ----------------------------------
-- boolean 布尔值，有两个可选的值：true 和 false。 在条件判断中，Lua将 false 和 nil 判断为假，其他都为真（与Javascript不一样，0和空字符串在Lua中也是真）


------------------------------------ number 类型 ----------------------------------
-- number 数字，Lua不区分整数和浮点数类型。所以一个number类型的值既可以是整数，也可以是浮点数。当一个number类型的值没有小数或小数部分都是0时，Lua将其视为整数，否则，将视为浮点数。
print("number类型:")
print("", 3.00, 3.12, 3.00 == 3);


------------------------------------ string 类型 ----------------------------------
-- string 字符串，Lua完全采用8位编码，所以不具有编码类型的特征（如Java的UTF-8或GBK），字符串也是不可变(immutable)的值
-- 字符串字面量可以使用一对匹配的双引号或单引号来界定，字符串本身包含单引号或双引号时，需要使用反斜杠进行转移。如：
print("string类型:")
print("", "hello, 'world'", 'hello, \'world\'', "hello, \"world\"");
-- 字符串字面量还可以使用“[==[”和它后面出现的第一个“]==]”来界定，类似注释块，其中的字符串可以分多行，首行的第一个字符如果是换行符将被忽略，中间的转义字符也不会转移。类似xml中的CDATA标签。
-- 注意：“[==[”和“]==]”的等号数量可以是0到任意个数，但必须保证两个的等号个数相等，这样，字符串中就可以包含类似“]]”的值，而不会与边界符号冲突了
html = [=[
    <html>
        [[ <div>hello, \"world\"</div> ]]
    </html>
]=]
print("", html)
-- Lua的转义符包括：\a(响铃)  \b(退格)  \f(提供表格)  \n(换行)  \r(回车)  \t(水平tab)  \v(垂直tab)  \\(反斜杠)  \'(单引号)  \"(双引号)  \ddd(数字转移，等价于数字在ASCII中的字符，如\97 == a)
print("", "string转义:", "\a", "\f", "\t", "\v", "\97")
-- 字符串和数字之间可以自动转换，例如字符串也可以参与算术运算中，Lua将字符串自动转换为数字
print("", "类型转换:", "10" + 1)
-- 多个字符串拼接：使用“..”对多个值进行字符串拼接，数字在拼接时会自动转换为字符串，也可以使用toString函数转换为字符串
print("", "字符串拼接:", "字符串" .. 8 .. tostring(3.44))
-- 字符串长度：在字符串前加“#”操作符可以获取字符串的长度，因为Lua的字符串采用8位编码，所以，中文的长度并不是字符的个数
print("", "字符串长度:", #"hello, world", #"你好，中国")
-- 取子串：string.sub(s, i, j) 参数 i 为子串的起始位置，从1开始；j为子串的截止位置，包含截止位置的字符，-1表示末尾
print("", "取子串:", string.sub("hello, world", 3, 6))
-- 子串查找：string.find(s, pattern [,init [, plain]]) 从字符串s中查找与模式pattern匹配的。init表示开始查找的位置，默认为1；plain表示使用模式匹配还是纯文本匹配，true为纯文本匹配。默认为false。未找到返回nil
print("", "找子串:", string.find("hello, world", "world"), string.find("hello, world", 'hallo'))
-- 子串替换：string.gsub(s, pattern, replacement[, n]) 将字符串s中与模式pattern匹配的子串替换为replacement。如果指定了n，表示只替换n次匹配的子串。默认为全部替换
print("", "替换子串:", string.gsub("hello, world", "l", "r"))


------------------------------------ table 类型 ----------------------------------
-- table类型是一种具有特殊索引方式的数组，不仅可以用整数来索引，也可是使用字符串或其他类型的值(除了nil)。table是引用类型，没有固定大小，可以动态添加任意数量的元素到table中。当一个table类型的值不再被引用时，Lua的垃圾收集器将回收它所占用的内存。
-- table类型值的定义：使用构造表达式“{}”，可以通过“[]”和下标“.”的方式对索引的值进行访问。“.”的方式不支持数字。索引可以是一个字符串、数字，也可以是一个变量
tbl = {};   tbl.a = "a";    tbl["b"] = "b";     tbl[0] = 0;     tbl["0"] = "0";     a = "b";
print("table类型:")
print("", tbl["a"], tbl[a], tbl["b"], tbl[0], tbl["0"], tbl[0] == tbl["0"])  -- 注意：tbl["a"]和tbl[a]分别是对字符串"a"和变量a进行索引

-- 长度操作符“#”返回table中最后一个索引值，例如：table分别索引 1、2、3 三个数字，则长度操作符将返回 3。下面的例子将定义一个1到10的索引，并输出索引的所有值
tbl = {};   str = "";
for i = 1, 10 do        -- 索引1到10的值为对应的索引序号
    tbl[#tbl + 1] = i
end
for i = 1, #tbl do      -- 长度操作符搭配循环取值只适用于索引值为数字的情况，如果索引值为字符串，将无法正常通过这种方式遍历到数组的每一个值
    str = str .. tbl[i];
end
print("", "str:", #tbl, str)

-- table的索引值可以是一个表达式，这种情况下，table将索引表达式解释后的值，例如：j = "10"; tbl[tonumber(j)] = 2; 表示table中索引10的值为2（注意这里的索引是数字10，不是字符串"10"）
a = 10;     j = "10";   tbl[tonumber(j)] = j;
print("", "expression", "tbl[tonumber(j)]:", tbl[tonumber(j)], tbl[a] == tbl[tonumber(j)]);

-- table可以初始化数组，如下所示，days[1]将初始化为字符串“Sunday”，days[2]将初始化为字符串“Monday”。初始化的时候如果未指定索引，默认为从1开始的序列
days = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
print("", "days", "days[1] = " .. days[1], "days[2] = " .. days[2])

-- table可以在初始化的时候，指定索引以及索引的值，如：
languages = {java = "Java Programming Language", lua = "The Lua Script Language"}
print("", "languages", "java = " .. languages["java"], "lua = " .. languages["lua"])

-- 混合方式的table初始化，即包含数组类型的初始化和指定索引的初始化，例如：
-- 下面定义的polyline，color指定了索引，而“{x = 0, y = 0}”没有指定索引，所以，索引默认为1，后面3个点的索引依次为2、3、4。而polylineAlias与polyline是等价的
polyline = {
    color = "blue", thickness = 2, npoints = 4,     -- 都指定了索引
    {x = 0, y = 0},             -- 未指定索引，索引默认为 1
    {x = -10, y = 0},           -- 未指定索引，索引默认为 2
    {x = -10, y = 1},           -- 未指定索引，索引默认为 3
    {x = 0, y = 1}              -- 未指定索引，索引默认为 4
}
polylineAlias = {
    ["color"] = "blue", ["thickness"] = 2, ["npoints"] = 4,
    [1] = {x = 0, y = 0},
    [2] = {x = -10, y = 0},
    [3] = {x = -10, y = 1},
    [4] = {x = 0, y = 1}
}
print("", "polyline", "polyline[2].x = " .. polyline[2].x, "polylineAlias[2].x = " .. polylineAlias[2].x)

-- 可以使用 next 函数结合while遍历一个表格中的所有元素
print("", "traverse table")
local k, v
while true do
    k, v = next(polyline, k)
    if k == nil then
        break
    end
    print("", "", "k = " .. tostring(k) .. ", v = " .. tostring(v))
end

-- table初始化的时候，可以使用分号代替逗号，通常将分号用于分隔构造式中不同的成分，例如将数组部分与指定索引的部分分开，如下所示：
anyTbl = {
    x = 10, y = 45;         -- 指定索引的部分
    "one", "two", "three"   -- 数组部分
}

-- 删除table中的索引，只需要将对应索引的值设置为nil即可
languages.java = nil;
print("", languages["java"] == nil)

------------------------------------ function 类型 ----------------------------------
-- Lua中函数是作为第一类值来看待的，这表示函数可以存储在变量中，可以作为参数传递，也可以作为返回值。


------------------------------------ userdata 类型 ----------------------------------
-- userdata类型可以将任意c语言数据存储到Lua变量中，用于表示一种由应用程序或c语言库所创建的新类型，这种类型只能进行赋值和相等性测试。例如标准的I/O库就用userdata来表示文件