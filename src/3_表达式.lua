---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by luowei.
--- DateTime: 2019/8/11 16:25
--- 演示Lua表达式的语法
---

------------------------------------ 算数运算符 ----------------------------------
-- Lua支持的算数运算符包括：+(加法)  -(减法)  *(乘法)  /(除法)  ^(指数)  %(取模)  -(负号)

---------------- % 运算符
-- % 运算符用于取模，可用于整数和浮点数。用于浮点数时，可以对小数部分取模，例如：3.14 % 1 == 0.14;  Math.pi - Math.pi % 0.01 == 3.14
pi = math.pi;
print("% 运算符:")
print("", "10 % 3 = " .. 10 % 3)
print("", "3.14 % 1 = " .. 3.14 % 1)
print("", "math.pi - math.pi % 0.01 = " .. pi - pi % 0.01)


------------------------------------ 比较运算符 ----------------------------------
-- Lua支持的比较运算符包括：<(小于)  >(大于)   <=(小于或等于)  >=(大于或等于)  ==(等于)  ~=(不等于)

-- <(小于)  >(大于)   <=(小于或等于)  >=(大于或等于) 比较运算符：
-- 1. 只能对数字和字符串做 <、>、<=、>= 的比较，字符串是按照字母顺序进行比较的。不同类型的值不能使用上述运算符进行比较
print("<、>、<=、>= 比较运算符")
print("", "2 < 15 ? " .. tostring(2 < 15))
print("", '"2" < "15" ? ' .. tostring("2" < "15"))
-- print("", '"2" < 15 ? ' .. tostring(2 < "15"))           -- 此处不同类型的值放在一起比较将报错

-- == 比较运算符：
-- 1. 如果两个值的类型不相同，Lua会认为他们是不相等的，而不会自动进行类型转换，例如：0 == "0" 为false；nil只和自己相等
print("== 比较运算符:")
cmp = 0 == "0";     print("", '0 == "0" ? ' .. tostring(cmp))
print("", 'nil == nil ? ' .. tostring(nil == nil))
-- 2. 对引用类型的值（function、table、userdata），Lua是对引用进行比较，而不是比较值的内容


------------------------------------ 逻辑运算符 ----------------------------------
-- Lua支持的逻辑运算符包括：and(与)    or(或)      not(非)
-- Lua所有的逻辑运算符都将 false 和 nil 视为假，而将其他的值都是为真
print("and or not 逻辑运算符")
print("", "nil and 13 = " .. tostring(nil and 13))
print("", "false and 13 = " .. tostring(false and 13))
print("", "0 and 5 = " .. tostring(0 and 5))
-- 参与逻辑运算符的多个值可以是不同类型的值。
print("", "'a' or 5 = " .. tostring('a' or 5))
-- and 和 or 运算符都使用短路求值（short-cut evaluation），即：他么只有在需要的时候才回去评估第二个操作数。
-- 整个逻辑运算表达式返回的值为最后一个评估的表达式的值，如：0 and 5 将返回 5；而 nil or 1 or 3 将返回 1
-- 这样可以对一些表达式做简写，如下所示：
-- 1. x = x or v，等效于 if not x then x = v end，这是因为 x or v 表达式在 x 为true时将返回 x自身的值，否则，将返回 v的值
-- 2. (a and b) or c， 等效于C语言中的 a ? b : c，前提是 b 不为 false 和 nil
x = nil;    a = x or 10;    if x then b = x else b = 10 end;
print("", "a = " .. a, "b = " .. b)

u = 10;     v = 20;     max = (u > v and u) or v;       if u > v then max1 = u else max1 = v end;
print("", "max(u, v) = " .. max, "max(u, v) = " .. max1)


------------------------------------ 运算符的优先级 ----------------------------------
-- Lua运算符优先级从高到低依次是（同一行的运算符优先级相同）：
-- ^(指数运算符)
-- not  #   -(负数一元运算符)
-- *    /   %
-- +    -(减法)
-- ..(字符串连接运算符)
-- <    >   <=  >=  ~=  ==
-- and
-- or