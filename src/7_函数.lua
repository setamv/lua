---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by luowei.
--- DateTime: 2019/8/13 7:05
--- 函数
---
------------------------------------ 函数的调用 ----------------------------------
print("函数的调用")
-- 函数调用的格式一般都是函数名称后跟一对圆括号，圆括号中指定调用函数的参数。
-- 但有一种特殊的情况下，不需要写圆括号：一个函数若只有一个参数，并且此参数是一个字面字符串或table构造式，如：
print "hello, world!"       -- 等价于print("hello, world!")

-- Lua程序可以调用C语言编写的函数
-- 调用函数时，实参数量可以和形参数量不一样，如果实参多余形参，多余的部分将丢弃；如果实参少于形参，多余的形参将被初始化为nil


------------------------------------ 多重返回值 ----------------------------------
print("多重返回值")
-- Lua的函数可以返回多个值，只需要在 return 关键字后面列出所有的返回值即可。例如，下面的函数用于找到一个数组中的最大元素和最大元素的索引位置：
function maximum(arr)
    local maxIndex = nil
    local maxVal = nil
    for i, v in ipairs(arr) do
        if maxVal == nil or maxVal < v then
            maxIndex = i
            maxVal = v
        end
    end
    return maxIndex, maxVal
end
i, v = maximum({1, 4, 3, 5, 2})
print("", "maximum(arr) = arr(" .. i .. ") = " .. v)

-- Lua会调整一个函数的返回值数量。
-- 1、若将函数调用作为一条单独语句时，Lua会丢弃函数所有的返回值
-- 2、若将函数作为一个表达式的一部分来调用时，Lua只保留函数的第一个返回值，除非函数调用是一系列表达式的最后一个元素，这种情况下表达式将可以获得函数返回的所有值
--      这里一系列表达式是指：1）多重赋值；2）函数调用时传入的实参列表；3）table的构造式；4）return语句
function returnMultiVal(arr)       -- 定义一个返回多个值的函数
    return arr[1], arr[2], arr[3]
end
numbers = {1, 2, 3, 4}
print("", "作为一个表达式的一部分来调用时，只保留第一个返回值")
print("", "", returnMultiVal(numbers), "end")
a, b, c = returnMultiVal(numbers), 10                           -- a, b, c多重赋值将只会取函数返回值的第1个，因为函数调用不是表达式的最后一部分
print("", "", "a = " .. tostring(a) .. ", b = " .. tostring(b) .. ", c = " .. tostring(c))

print("", "函数调用是一系列表达式的最后一个元素，获得返回的所有值", returnMultiVal(numbers))
a, b, c = returnMultiVal(numbers)                               -- a, b, c多重赋值将会取函数的所有返回值，因为函数调用是表达式的最后一部分
print("", "", "a = " .. tostring(a) .. ", b = " .. tostring(b) .. ", c = " .. tostring(c))





